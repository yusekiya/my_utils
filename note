#! /usr/bin/env python3
'''
My note-taking utility
'''

import os
import sys
import subprocess
import shlex
import datetime
import argparse
try:
    import toml
except ModuleNotFoundError:
    print('You need the toml package. Run `python3 -m pip install toml`.')
    sys.exit(1)

CONFIG_FILE = os.path.expanduser(os.path.join("~", ".note", "config.toml"))
DEFAULT_CONFIG = {
    'note_dir': '~/my-note',
    'dir_format': '%Y/%m/',
    'file_name_format': '%d-%H%M%S.md',
}

# Load configuration from the file,
# otherwise create the config file and use default configuration
if os.path.isfile(CONFIG_FILE):
    config = toml.load(CONFIG_FILE)
else:
    if not os.path.isdir(os.path.dirname(CONFIG_FILE)):
        os.makedirs(os.path.dirname(CONFIG_FILE))
    with open(CONFIG_FILE, 'w') as fout:
        toml.dump(DEFAULT_CONFIG, fout)
    config = DEFAULT_CONFIG

if 'EDITOR' in os.environ and os.environ['EDITOR']:
    editor_command = os.environ['EDITOR']
else:
    raise RuntimeError('Environment variable "EDITOR" must be specified.')

def add(args):
    '''
    Create a new note
    '''
    try:
        keywords = input('Enter comma-separated list of keywords: ')
    except KeyboardInterrupt:
        return 0

    now = datetime.datetime.now()
    file_path = os.path.expanduser(
        os.path.join(config['note_dir'],
                     now.strftime(config['dir_format']),
                     now.strftime(config['file_name_format'])
        )
    )
    if not os.path.isdir(os.path.dirname(file_path)):
        os.makedirs(os.path.dirname(file_path))
    # Create a new file and open it with the specified editor
    if not os.path.isfile(file_path):
        with open(file_path, 'w') as fout:
            fout.write('Keywords: ' + keywords)
        subprocess.run(shlex.split(' '.join([editor_command, file_path])))
    print('{0} created'.format(file_path))

def _filter(keywords):
    note_dir = os.path.expanduser(config['note_dir'])
    _file_search_command = 'ag --markdown --nonumber --nogroup "keywords:" {0}'.format(note_dir)
    _get_filename_command = 'perl -pe \'s/(.*?):.*/$1/g\''
    _filter_command = 'fzf --height 100% --reverse -q "{0}" --preview "head -n 40 `echo {{}} | {1}`"'.format(' '.join(keywords), _get_filename_command)
    proc_search = subprocess.Popen(shlex.split(_file_search_command), stdout=subprocess.PIPE)
    proc_filter = subprocess.Popen(shlex.split(_filter_command),
                                   stdin=proc_search.stdout, stdout=subprocess.PIPE)
    proc_getname = subprocess.Popen(shlex.split(_get_filename_command),
                                    stdin=proc_filter.stdout,
                                    stdout=subprocess.PIPE,
                                    universal_newlines=True)
    output, _ = proc_getname.communicate()
    file_path = output.rstrip()
    return file_path

def search(args):
    if args.keywords is not None:
        keywords = args.keywords
    else:
        keywords = ''
    file_path = _filter(keywords)
    if os.path.isfile(file_path):
        print(file_path)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=('My note-taking utility\n\n'
                     'Examples:\n'
                     '  note add            - Create a new note\n'
                     '  less `note search`  - Search for a note, and view it with less command\n'
                     '  vim `note search`   - Search for a note, and open it with vim editor'
                    )
    )
    subparsers = parser.add_subparsers()

    parser_add = subparsers.add_parser('add', help='Add a new note.')
    parser_add.set_defaults(handler=add)

    parser_search = subparsers.add_parser('search', help='Search for a note, and print its path to stdout.')
    parser_search.add_argument("keywords", nargs='*', default=None)
    parser_search.set_defaults(handler=search)

    args = parser.parse_args()
    if hasattr(args, 'handler'):
        args.handler(args)
    else:
        parser.print_help()
